{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/rearch-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","Carlist","monsters","map","SearchBox","plasceHolder","changeHandler","type","placeholder","onChange","App","handleChange","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filterdMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iUAGaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCHbC,EAAU,SAAAR,GACnB,OACA,qBAAKC,UAAU,YAAf,SACED,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACtB,cAAC,EAAD,CAAuBA,QAASA,EAAhC,SAA0CA,EAAQE,MAAvCF,EAAQC,UCJhBM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,aAAcC,EAAhB,EAAgBA,cAAhB,OACrB,uBAAOZ,UAAU,SAASa,KAAK,SAASC,YAAaH,EACrDI,SAAUH,MCoCCI,G,wDAlCb,aAAc,IAAD,8BACX,gBAcFC,aAAe,SAAAC,GACb,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAdrC,EAAKC,MAAQ,CACXf,SAAU,GACVY,YAAa,IAJJ,E,qDASb,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACX,SAAUoB,S,oBAO1C,WAAS,IAAD,EAC4BC,KAAKN,MAA/Bf,EADF,EACEA,SAAUY,EADZ,EACYA,YACZU,EAAkBtB,EAASuB,QAAQ,SAAA5B,GAAO,OAAIA,EAAQE,KAAK2B,cAAcC,SAASb,EAAYY,kBACpG,OACE,sBAAKhC,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CAAWW,aAAa,kBACxBC,cAAeiB,KAAKZ,eACpB,cAAC,EAAD,CAAST,SAAUsB,W,GA7BTI,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.7a88f242.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./card.styles.css\"\n\nexport const Card = props => (\n    <div className=\"card-container\">\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n        <h2>{props.monster.name}</h2>\n        <p>{props.monster.email}</p>\n    </div>\n)","import React from \"react\";\nimport './card-list.styles.css'\nimport { Card } from \"../card/card.component\"\n\nexport const Carlist = props => {\n    return (\n    <div className=\"card-list\" >\n    { props.monsters.map(monster => \n          <Card key={monster.id} monster={monster}>{monster.name}</Card>\n        )}\n    </div>\n    )\n}","import React from \"react\";\n\nimport './search-box.styles.css'\n\nexport const SearchBox = ({plasceHolder, changeHandler}) => (\n    <input className=\"search\" type=\"search\" placeholder={plasceHolder} \n    onChange={changeHandler}></input>\n)","//import logo from './logo.svg';\nimport { Component } from 'react';\nimport { Carlist } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/rearch-box/search-box.component';\nimport './App.css';\n\nclass App extends Component{\n\n  constructor(){\n    super();\n    this.state = {\n      monsters: [],\n      searchField: \"\"\n    }\n    //this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount(){\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}));\n  }\n\n  handleChange = e => {\n    this.setState({searchField: e.target.value})\n  }\n\n  render(){\n    const { monsters, searchField } = this.state;\n    const filterdMonsters = monsters.filter( monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n    return (\n      <div className=\"App\">\n        <h1>Monster Rolodex</h1>\n        <SearchBox plasceHolder=\"Search monsters\"\n        changeHandler={this.handleChange}></SearchBox>\n        <Carlist monsters={filterdMonsters}>\n        </Carlist>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}